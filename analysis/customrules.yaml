image:
  registry: gcr.io
  repository: ossf-malware-analysis/falco
  tag: 0.27.0-3
ebpf:
  enabled: true
docker:
  enabled: false # we use containerd
resources:
  requests:
    cpu: 500m
  limits:
    cpu: 1000m
falco:
  priority: CRITICAL
  httpOutput:
    enabled: true
    url: http://analysis.default/falco
  jsonOutput: true
  jsonIncludeOutputProperty: true
  syscallEventDrops:
    rate: 10
    maxBurst: 500
  bufferedOutputs: true
  outputs:
    rate: 10
    maxBurst: 10000
  webserver:
    enabled: false
extraArgs:
  - "-A"  # https://falco.org/docs/rules/#ignored-system-calls
customRules:
  rules-custom.yaml: |-
    - list: allowed_files
      items: [/etc/ld.so.cache, /etc/hosts, /usr/lib/ssl/openssl.cnf, /etc/nsswitch.conf, /etc/resolv.conf]
    - macro: stat_file
      condition: evt.type in (access, stat, stat64, lstat, lstat64)
    - macro: open_file
      condition: evt.type in (open, openat)
    - rule: Unexpected file stat
      desc: Detect file stat outside the workingdir
      condition: >
        (stat_file and
         not evt.arg.path startswith /app and
         not evt.arg.path startswith /tmp and
         not evt.arg.path startswith /usr/local and
         not evt.arg.path startswith /usr/lib and
         not evt.arg.path startswith /usr/share and
         not evt.arg.path startswith /lib and
         not evt.arg.path startswith /usr/include/c++ and
         not evt.arg.path startswith /run/containerd and
         not evt.arg.path in (allowed_files) and
         container and
         k8s.ns.name="default" and
         k8s.pod.label.install="1")
      output: unexpected file stat (command=%proc.cmdline type=%evt.type fd=%evt.arg.path user=%user.name pod=%k8s.pod.name labels=%k8s.pod.labels)
      priority: CRITICAL

    - rule: Unexpected file access
      desc: Detect file access outside the workingdir
      condition: >
        (open_file and
         not evt.arg.name startswith /app and
         not evt.arg.name startswith /tmp and
         not evt.arg.name startswith /usr/local and
         not evt.arg.name startswith /usr/lib and
         not evt.arg.name startswith /usr/share and
         not evt.arg.name startswith /lib and
         not evt.arg.name startswith /usr/include/c++ and
         not evt.arg.name startswith /run/containerd and
         not evt.arg.name in (allowed_files) and
         container and
         k8s.ns.name="default" and
         k8s.pod.label.install="1")
      output: unexpected file access (command=%proc.cmdline type=%evt.type fd=%evt.arg.name user=%user.name pod=%k8s.pod.name labels=%k8s.pod.labels)
      priority: CRITICAL

    - rule: Network connection
      desc: Detect network access
      condition: >
          (outbound and
           container and
           k8s.ns.name="default" and
           k8s.pod.label.install="1")
      output: network connection (command=%proc.cmdline ip=%fd.sip user=%user.name pod=%k8s.pod.name labels=%k8s.pod.labels)
      priority: CRITICAL
